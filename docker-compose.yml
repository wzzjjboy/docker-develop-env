version: '3'
networks:  
  backend:
    driver: bridge
services:
  hyperf: 
    build:
      context: ./hyperf
      args:
        - no_proxy
    volumes:
      - ./../:/mnt/d/htdocs
    ports:
      - "8110:9502"
      - "8111:9503"
    tty: true
    environment:
      - ENV=test
    networks:
        - backend
  swoft: 
    build:
      context: ./swoft
      args:
        - INSTALL_AMQP=true
        - CHANGE_SOURCE=true
    volumes:
      - ./../:/var/www
    ports:
      - "8120:9501"
    tty: true
    environment:
      - ENV=test
    networks:
        - backend
#  msf:
#    build:
#      context: ./msf
#      args:
#        - INSTALL_AMQP=true
#    volumes:
#      - ./../:/home/worker
#    ports:
#      - "8083:22"
#      - "8084:80"
#      - "8085:443"
#    tty: true
#    environment:
#      - ENV=test
#    networks:
#      - backend
  msf:
    build:
      context: ./msf
      args:
        - CHANGE_SOURCE=true
        - INSTALL_XSL=true
        - INSTALL_PHPREDIS=true
        - INSTALL_SWOOLE=true
        - INSTALL_MONGO=true
        - INSTALL_AMQP=true
        - INSTALL_PCNTL=true
        - INSTALL_MEMCACHED=true
        - INSTALL_MYSQLI=true
        - INSTALL_IMAGEMAGICK=true
        - INSTALL_IMAP=true
        - INSTALL_YAML=true
        - INSTALL_MYSQL_CLIENT=true
        - INSTALL_PING=true
        - INSTALL_YAC=true
        - INSTALL_INOTIFY=true
    volumes:
      - ./../:/var/www
    working_dir: /var/www
    ports:
      - "8130:22"
      - "8131:80"
      - "8132:443"
    tty: true
    environment:
      - ENV=test
      - MSF_ENV=test-new
    networks:
        - backend

  yii2: 
    build:
      context: ./yii2
      args:
        - no_proxy
    volumes:
      - ./../:/mnt/d/htdocs
    ports:
      - "8140:9501"
    tty: true
    environment:
      - ENV=test
    networks:
        - backend

  laravel: 
    build:
      context: ./laravel
      args:
        - no_proxy
    volumes:
      - ./../:/mnt/d/htdocs
    ports:
      - "8150:9501"
    tty: true
    environment:
      - ENV=test
    networks:
        - backend

  nginx: 
    build:
      context: ./nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./nginx/log:/var/log/nginx
      - ./nginx/sites:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/static:/var/www/html/download
    ports:
      - "80:80"
      - "443:443"
    tty: true
    environment:
      - ENV=test
    networks:
        - backend

  mysql: 
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=5.7
    ports:
      - "3306:3306"  
    tty: true
    environment:
      - MYSQL_DATABASE=default
      - MYSQL_USER=default
      - MYSQL_PASSWORD=secret
      - MYSQL_ROOT_PASSWORD=root
      - TZ=UTC
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/:/docker-entrypoint-initdb.d
    networks:
        - backend

  redis: 
    build:
      context: ./redis
      args:
        - no_proxy
    ports:
      - "6379:6379"
    tty: true
    environment:
      - ENV=test
    networks:
        - backend

  beanstalkd:
    image: uretgec/beanstalkd-alpine
    ports:
      - "11300:11300"
    #    volumes:
    #      - ./beanstalkd/data:/data
    networks:
      - backend

  beanstalkd2:
    image: uretgec/beanstalkd-alpine
    ports:
      - "11301:11300"
    networks:
      - backend

  swoole:
    image: phpswoole/swoole:4.4.25-php7.2
    ports:
      - "50001-50099:50001-50099"
    volumes:
      - ./../:/var/www
    working_dir: /var/www
    tty: true

  rabbitmq:
    image: rabbitmq:3.8.3-management
    container_name: rabbitmq
    restart: "no"
    hostname: myRabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: "no"
    volumes:
      # 将你的prometheus.yml文件放在当前文件同级下，或自定义
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      #- /home/prometheus/node_down.yml:/etc/prometheus/node_down.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana
    restart: "no"
#    volumes:
      # 创建 etc目录，data目录存储grafana的数据
#      - ./grafana/etc:/etc/grafana
#      - ./grafana/data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - backend

  node-exporter:
    image: prom/node-exporter
    restart: "no"
    ports:
      - "9100:9100"
    networks:
      - backend

  etcd1:
    image: quay.io/coreos/etcd
    container_name: etcd1
    command: etcd -name etcd1 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
    ports:
      - 2379
      - 2380
    networks:
      - backend

  etcd2:
      image: quay.io/coreos/etcd
      container_name: etcd2
      command: etcd -name etcd2 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
      ports:
        - 2379
        - 2380
      networks:
        - backend

  etcd3:
      image: quay.io/coreos/etcd
      container_name: etcd3
      command: etcd -name etcd3 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380" -initial-cluster-state new
      ports:
        - 2379
        - 2380
      networks:
        - backend

  zookeeper:
    image: wurstmeister/zookeeper
    restart: unless-stopped
    hostname: zoo1
    ports:
      - "2181:2181"
    container_name: zookeeper
    networks:
      - backend

  # kafka version: 1.1.0
  # scala version: 2.12
  kafka1:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "stream-in:1:1,stream-out:1:1"
    depends_on:
      - zookeeper
    container_name: kafka
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:7.8.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
    networks:
      - backend

  kibana:
    image: kibana:7.8.0
    container_name: kibana
    environment:
      - "I18N_LOCALE=zh-CN"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

  filebeat:
    image: elastic/filebeat:7.5.1
    container_name: filebeat
    volumes:
      -  ./filebeat/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      -  /home/alan/app/logs/dcache_rpc:/var/log/dcache_rpc
    networks:
      - backend

  gostash:
    build:
      context: ./go-stash
    container_name: gostash
    networks:
      - backend
